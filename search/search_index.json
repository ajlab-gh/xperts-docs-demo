{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"page-0/","title":"docs-template","text":"<p>This repository serves as a template and placeholder for quickly building and compiling Markdown using mkdocs.</p>"},{"location":"page-1/","title":"Getting Started","text":"<p>Follow these steps to quickly set up and start working on this project:</p> <ol> <li>Fork the Repository:</li> <li> <p>Begin by forking this repository to your GitHub account.</p> </li> <li> <p>Clone the Repository:</p> </li> <li> <p>Clone your forked repository to your local machine:</p> <p><code>git clone https://github.com/YOUR_USERNAME/docs-templates.git  cd docs-templates</code></p> </li> <li> <p>Configure GitHub Pages:</p> </li> <li>In your <code>docs-templates</code> repository settings, go to Actions -&gt; Pages.</li> <li>Set the Build and Deployment source to <code>Deploy from a branch</code>.</li> <li>Choose the <code>gh-pages</code> branch and set the folder to /(root).</li> <li> <p>Save your changes.</p> <p></p> </li> <li> <p>Configure Gist:</p> </li> <li> <p>In the repository's About section, click the Settings gear icon.</p> <p></p> </li> <li> <p>Enable the <code>Use your GitHub Pages Website</code> option and Save the changes.</p> <p></p> </li> <li> <p>Customize Markdown Files:</p> </li> <li> <p>The <code>actions</code> and <code>pages</code> in this template are set up to build your gist based on the structure defined in <code>mkdocs.yml</code> under the <code>nav</code> section.</p> <p><code>nav:    - Home:        - page-0.md    - Section 1:        - page-1.md    - Section 2:        - page-2.md</code></p> </li> <li> <p>The <code>nav</code> section is where you define the structure of your documentation site. You can create nested pages to organize your content into sections and subsections, providing a clear hierarchy for users to navigate. For example, to add nested subsections within a section, your <code>nav</code> might look like this:</p> <p><code>nav:    - Home: index.md    - Section 1: page-1.md    - Section 2: page-2.md    - Section 3:        - Overview: section-3/overview.md        - Details:            - Subsection 1: section-3/details/subsection-1.md            - Subsection 2: section-3/details/subsection-2.md</code></p> </li> <li> <p>In this example:</p> <ul> <li><code>Section 3</code> contains an <code>Overview</code> page and a <code>Details</code> section with two subsections.</li> <li>Each entry under <code>nav</code> corresponds to a markdown file that you have created in the <code>docs/</code> directory.</li> <li>You can rename sections, subsections, and pages as needed to match your documentation structure.</li> </ul> </li> <li> <p>Rename sections and corresponding markdown files as needed. Ensure the <code>nav</code> entries in <code>mkdocs.yml</code> match your markdown file names.</p> </li> <li> <p>After editing or adding markdown files, commit and push your changes:</p> <p><code>git add .  git commit -m \"&lt;describe your changes&gt;\"  git push origin main</code></p> </li> <li> <p>Rename sections and corresponding markdown files as needed. Ensure the <code>nav</code> entries in <code>mkdocs.yml</code> match your markdown file names.</p> </li> <li> <p>Navigate to your Gist and see your finished product!</p> <p></p> </li> </ol>"},{"location":"page-2/","title":"Workflow Overview","text":"<p>The workflow includes the following stages:</p> <ol> <li>Checkout Repository: Retrieves the latest version of the repository using the <code>actions/checkout</code> action.</li> <li>Configure GitHub Pages: Sets up GitHub Pages to deploy the documentation.</li> <li>Install Python and MkDocs: Installs Python 3.x and required MkDocs plugins.</li> <li>Build Docs: Runs <code>mkdocs gh-deploy</code> to build and deploy the documentation to GitHub Pages.</li> <li>Triggering the Workflow: Automatically triggers when changes are pushed to the <code>main</code> branch or when a pull request is created, ensuring the documentation is always current.</li> </ol>"},{"location":"page-2/#concurrent-builds","title":"Concurrent Builds","text":"<p>GitHub Actions' concurrency feature is used to ensure only one build runs at a time. If multiple pushes occur, subsequent builds will wait until the previous one finishes.</p>"},{"location":"page-2/#permissions","title":"Permissions","text":"<p>The workflow has write permissions for <code>contents</code>, <code>pages</code>, and <code>id-token</code>, allowing it to create and update files as needed.</p> <p>Using GitHub Actions to automate the documentation process ensures it is always up-to-date, reliable, and easily accessible.</p>"},{"location":"section-3/section-3-overview/","title":"Section 3 - Overview","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>"},{"location":"section-3/details/subsection-1/","title":"Section 3 - Details - Subsection 1","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>"},{"location":"section-3/details/subsection-2/","title":"Section 3 - Details - Subsection 2","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>"}]}